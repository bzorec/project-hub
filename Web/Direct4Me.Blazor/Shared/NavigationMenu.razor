@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime


<div class="col-lg-2 col-md-3 col-sm-4 bg-primary">
    <div class="navbar navbar-dark">
        <a class="navbar-brand" href="#">My App</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#sidebar" aria-controls="sidebar" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
    <div class="collapse navbar-collapse" id="sidebar">
        <ul class="navbar-nav">
            <li class="nav-item">
                <NavLink class="nav-link" href="/">Dashboard</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/login">Login</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/register">Register</NavLink>
            </li>
        </ul>
    </div>
</div>

@code {
    private bool _isDarkMode;

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = await JsRuntime.InvokeAsync<bool>("getDarkMode");

        await JsRuntime.InvokeVoidAsync("registerDarkModeListener", DotNetObjectReference.Create(this));
    }

    public async Task ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        await JsRuntime.InvokeVoidAsync("setDarkMode", _isDarkMode);
    }

    [JSInvokable]
    public void UpdateDarkMode(bool isDarkMode)
    {
        _isDarkMode = isDarkMode;
        StateHasChanged();
    }

}