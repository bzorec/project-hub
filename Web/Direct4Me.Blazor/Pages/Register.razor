@page "/register"
@using System.ComponentModel.DataAnnotations
@using Direct4Me.Repository.Entities
@using Direct4Me.Repository.Services.Interfaces
@inject IUserService UserService
@inject NavigationManager NavigationManager

<div class="container-fluid bg-dark min-vh-100 pt-4">
    <div class="d-flex justify-content-center align-items-center h-100">
        <div class="col-sm-10 col-md-8 col-lg-6">
            <h2 class="text-center mb-4">Sign up</h2>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @ErrorMessage
                </div>
            }
            <EditForm class="p-5 rounded shadow" Model="@RegisterModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="mb-3">
                    <label for="email" class="form-label">Email address</label>
                    <InputText type="email" class="form-control" id="email" aria-describedby="emailHelp" placeholder="Enter email" @bind-Value="RegisterModel.RegisterEmail"></InputText>
                    <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" class="form-control" id="password" placeholder="Password" @bind-Value="RegisterModel.RegisterPassword"></InputText>
                </div>
                <div class="mb-3">
                    <label for="firstName" class="form-label">First Name</label>
                    <InputText type="text" class="form-control" id="firstName" placeholder="Enter your first name" @bind-Value="RegisterModel.RegisterFirstName"></InputText>
                </div>
                <div class="mb-3">
                    <label for="lastName" class="form-label">Last Name</label>
                    <InputText type="text" class="form-control" id="lastName" placeholder="Enter your last name" @bind-Value="RegisterModel.RegisterLastName"></InputText>
                </div>
                <button type="submit" class="btn btn-primary w-100 mt-4" disabled="@IsLoading">
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display: @(IsLoading ? "inline-block" : "none")"></span>
                    Sign up
                </button>
            </EditForm>
            @if (IsSuccess)
            {
                <div class="alert alert-success mt-4" role="alert">
                    You have successfully registered.
                </div>
            }
        </div>
    </div>
</div>

@code {

    public class RegistrationModel
    {
        [Required]
        public string RegisterEmail { get; set; } = null!;

        [Required]
        public string RegisterPassword { get; set; } = null!;

        [Required]
        public string RegisterFirstName { get; set; } = null!;

        [Required]
        public string RegisterLastName { get; set; } = null!;
    }

    public RegistrationModel RegisterModel { get; set; } = new();

    private string? ErrorMessage { get; set; }

    public bool IsLoading { get; set; }

    private async Task HandleRegistration()
    {
        try
        {
            IsSuccess = await UserService.TrySignUpAsync(new UserEntity
            {
                Email = RegisterModel.RegisterEmail,
                Password = RegisterModel.RegisterPassword.Trim(),
                FirstName = RegisterModel.RegisterFirstName,
                LastName = RegisterModel.RegisterLastName
            });

            if (!IsSuccess)
            {
                ErrorMessage = "User already exists.";
            }

            NavigationManager.NavigateTo("/login", true, true);
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }

    public bool IsSuccess { get; set; }

}