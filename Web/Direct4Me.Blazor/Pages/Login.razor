@page "/login"
@using Direct4Me.Repository.Services
@using Direct4Me.Blazor.Services
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IJwtService JwtService
@inject IJsInteropService JsInteropService

<div class="container-fluid bg-dark min-vh-100 pt-4">
    <div class="d-flex justify-content-center align-items-center h-100">
        <div class="col-sm-10 col-md-8 col-lg-6">
            <h2 class="text-center mb-4">Sign in</h2>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @ErrorMessage
                </div>
            }
            <EditForm Model="@LoginModel" OnValidSubmit="HandleLogin">
                <div class="p-5 rounded shadow">
                    <div class="mb-3">
                        <label for="email" class="form-label">Email address</label>
                        <InputText id="email" class="form-control" @bind-Value="LoginModel.Email"></InputText>
                        <ValidationMessage For="@(() => LoginModel.Email)"/>
                        <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText type="password" id="password" class="form-control" @bind-Value="LoginModel.Password"></InputText>
                        <ValidationMessage For="@(() => LoginModel.Password)"/>
                    </div>
                    <button type="submit" class="btn btn-primary w-100 mt-4" disabled="@IsLoading">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display: @(IsLoading ? "inline-block" : "none")"></span>
                        Sign in
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? ErrorMessage { get; set; }
    public bool IsLoading { get; set; }

    public class SigninModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }

    public SigninModel LoginModel { get; set; } = new();

    public async Task HandleLogin()
    {
        var signedIn = await UserService.TrySignInAsync(LoginModel.Email, LoginModel.Password);

        if (!signedIn)
        {
            ErrorMessage = "Wrong email or password.";
            return;
        }

        var user = await UserService.GetUserByEmailAsync(LoginModel.Email);
        try
        {
            var jwtToken = JwtService.GenerateJwtToken(LoginModel.Email, user?.Fullname);

            await JsInteropService.SetToken(jwtToken);

            await UserService.UpdateLoginCount(LoginModel.Email, LoginType.Default);

            NavigationManager.NavigateTo("/dashboard", true, true);
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
    }

}